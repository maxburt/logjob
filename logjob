#!/usr/bin/env python3
import csv
import os
import sys
from datetime import datetime
from pathlib import Path

# Use ~/.logjob directory for data storage
data_dir = Path.home() / ".logjob"
data_dir.mkdir(parents=True, exist_ok=True)
filename = str(data_dir / "job_applications.csv")
archive_file = data_dir / "deleted.csv"

def ensure_file_exists():
    if not os.path.exists(filename):
        with open(filename, mode='w', newline='') as file:
            writer = csv.writer(file)
            writer.writerow(["Date", "Position", "Company"])

def log_job():
    position = input("Position? ").replace(',', '').strip()
    company = input("Company? ").replace(',', '').strip()

    if not position and not company:
        print("‚ö†Ô∏è  No input provided. Nothing was logged.")
        return

    today = datetime.now().strftime("%Y-%m-%d")

    with open(filename, mode='r', newline='') as file:
        rows = list(csv.reader(file))

    # Clean up weird empty rows
    cleaned_rows = []
    for row in rows:
        if not row or all(cell.strip() == '' for cell in row):
            cleaned_rows.append([])
        else:
            cleaned_rows.append(row)
    rows = cleaned_rows

    for i, row in enumerate(rows):
        if not row or all(cell.strip() == '' for cell in row):
            rows[i] = [today, position, company]
            break
    else:
        rows.append([today, position, company])

    with open(filename, mode='w', newline='') as file:
        writer = csv.writer(file)
        writer.writerows(rows)

    print(f"‚úÖ Logged: {position} at {company} on {today}")

def delete_last_entry():
    with open(filename, mode='r', newline='') as file:
        rows = list(csv.reader(file))

    if len(rows) <= 1:
        print("‚ö†Ô∏è  No entries to delete.")
        return

    for i in range(len(rows) - 1, 0, -1):
        if rows[i] and any(cell.strip() for cell in rows[i]):
            deleted = rows.pop(i)

            # Save updated job list
            with open(filename, mode='w', newline='') as file_out:
                writer = csv.writer(file_out)
                writer.writerows(rows)

            # Archive deleted entry
            archive_exists = archive_file.exists()
            with open(archive_file, mode='a', newline='') as archive:
                writer = csv.writer(archive)
                if not archive_exists:
                    writer.writerow(["Date", "Position", "Company"])
                writer.writerow(deleted)

            print(f"üóëÔ∏è  Deleted and archived last entry: {', '.join(deleted)}")
            return

    print("‚ö†Ô∏è  No valid entries found to delete.")

def undo_delete():
    if not archive_file.exists():
        print("‚ö†Ô∏è  No deleted entries to restore.")
        return

    with open(archive_file, mode='r', newline='') as file:
        rows = list(csv.reader(file))

    if len(rows) <= 1:
        print("‚ö†Ô∏è  No entries to undo.")
        return

    last_deleted = rows.pop()
    with open(archive_file, mode='w', newline='') as file:
        writer = csv.writer(file)
        writer.writerows(rows)

    # Add back to main job list
    with open(filename, mode='r', newline='') as file:
        current_rows = list(csv.reader(file))

    current_rows.append(last_deleted)

    with open(filename, mode='w', newline='') as file:
        writer = csv.writer(file)
        writer.writerows(current_rows)

    print(f"‚Ü©Ô∏è  Restored: {', '.join(last_deleted)}")

def view_jobs():
    with open(filename, mode='r', newline='') as file:
        reader = csv.reader(file)
        rows = list(reader)

    if len(rows) <= 1:
        print("üì≠ No jobs logged yet.")
        return

    print("\nüìÑ Job Applications:")
    print("-" * 40)
    for i, row in enumerate(rows[1:], 1):
        if row and any(cell.strip() for cell in row):
            date, position, company = row
            print(f"{i}. [{date}] {position} at {company}")
    print("-" * 40)

def export_csv_copy():
    export_path = Path.home() / "Documents" / "job_applications_export.csv"
    try:
        with open(filename, mode='r', newline='') as src, open(export_path, mode='w', newline='') as dest:
            dest.write(src.read())
        print(f"üìÑ CSV file exported to: {export_path}")
    except Exception as e:
        print(f"‚ùå Failed to export file: {e}")
        
def view_deleted():
    if not archive_file.exists():
        print("üóÉÔ∏è  No deleted entries yet.")
        return

    with open(archive_file, mode='r', newline='') as file:
        rows = list(csv.reader(file))

    if len(rows) <= 1:
        print("üóÉÔ∏è  No deleted entries found.")
        return

    print("\nüóÉÔ∏è  Deleted Job Entries:")
    print("-" * 40)
    for i, row in enumerate(rows[1:], 1):
        if row and any(cell.strip() for cell in row):
            date, position, company = row
            print(f"{i}. [{date}] {position} at {company}")
    print("-" * 40)


def search_jobs():
    keyword = input("Enter a keyword to search for: ").strip().lower()
    if not keyword:
        print("‚ö†Ô∏è  No keyword entered.")
        return

    with open(filename, mode='r', newline='') as file:
        reader = csv.reader(file)
        rows = list(reader)

    if len(rows) <= 1:
        print("üì≠ No jobs logged yet.")
        return

    print(f"\nüîç Search results for '{keyword}':")
    print("-" * 40)
    found = False
    for i, row in enumerate(rows[1:], 1):
        if row and any(keyword in cell.lower() for cell in row):
            date, position, company = row
            print(f"{i}. [{date}] {position} at {company}")
            found = True
    if not found:
        print("‚ùå No matching entries found.")
    print("-" * 40)


def show_help():
    print("""
Usage:
  logjob                  Log a new job entry
  logjob log              Log a new job entry
  logjob delete-last      Delete the last job entry
  logjob undo-delete      Restore the last deleted job
  logjob view             View job log entries
  logjob export           Export job log to Documents folder
  logjob view-deleted     View deleted job entries
  logjob search           Search job log entries
  logjob help             Show this help message
""")

# Main entry
if __name__ == "__main__":
    ensure_file_exists()

    command = sys.argv[1] if len(sys.argv) >= 2 else "log"

    if command in ("log", "l"):
        log_job()
    elif command in ("delete-last", "d", "delete"):
        delete_last_entry()
    elif command in ("undo-delete", "u", "restore"):
        undo_delete()
    elif command in ("view", "v"):
        view_jobs()
    elif command in ("view-deleted", "vd", "deleted"):
        view_deleted()
    elif command in ("export", "e"):
        export_csv_copy()
    elif command in ("search", "s"):
        search_jobs()
    else:
        show_help()
